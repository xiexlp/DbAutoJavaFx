package com.js.cluster.elastic;

import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;
import org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;
import org.elasticsearch.client.IndicesAdminClient;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.transport.client.PreBuiltTransportClient;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;

import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;

public class ${tableWrapper.beanname}ElasticService {

public static final String CLUSTER_NAME = Config.CLUSTER_NAME;
public static final String HOST_IP =Config.HOST_IP;
public static final int TCP_PORT = Config.TCP_PORT;

static Settings settings = Settings.builder().put("cluster.name", CLUSTER_NAME)

.build();

public static TransportClient getClient() {
try {
client = new PreBuiltTransportClient(settings)
.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(HOST_IP), TCP_PORT));
} catch (UnknownHostException e) {
e.printStackTrace();
}

return client;
}

private static volatile TransportClient client;

public static TransportClient getSingleClient() {
if (client == null) {
synchronized (TransportClient.class) {
if (client == null) {
try {
client = new PreBuiltTransportClient(settings).addTransportAddress(
new InetSocketTransportAddress(InetAddress.getByName(HOST_IP), TCP_PORT));
} catch (UnknownHostException e) {
e.printStackTrace();
}
}
}
}
System.out.println(client);
return client;
}

// 获取索引管理的IndicesAdminClient
public static IndicesAdminClient getAdminClient() {
return getSingleClient().admin().indices();
}

// 创建索引
public static boolean createIndex(String indexName, int shards, int replicas) {
Settings settings = Settings.builder().put("index.number_of_shards", shards)
.put("index.number_of_replicas", replicas).build();

CreateIndexResponse createIndexResponse = getAdminClient().prepareCreate(indexName.toLowerCase())
.setSettings(settings).execute().actionGet();

boolean isIndexCreated = createIndexResponse.isAcknowledged();
if (isIndexCreated) {
System.out.println("索引" + indexName + "创建成功");
} else {
System.out.println("索引" + indexName + "创建失败");
}
return isIndexCreated;
}

public static boolean deleteIndex(String indexName) {

DeleteIndexResponse deleteResponse = getAdminClient().prepareDelete(indexName.toLowerCase()).execute()
.actionGet();

boolean isIndexDeleted = deleteResponse.isAcknowledged();

if (isIndexDeleted) {
System.out.println("索引" + indexName + "删除成功");
} else {
System.out.println("索引" + indexName + "删除失败");
}

return isIndexDeleted;
}

public static boolean setMapping(String indexName, String typeName, String mapping) {

getAdminClient().preparePutMapping(indexName).setType(typeName).setSource(mapping, XContentType.JSON).get();

return false;
}


public static void indexCreate(String tablename) {
// 1.创建索引
String indexName = Config.INDEX_NAME;
${tableWrapper.beanname}ElasticService.createIndex(indexName, 1, 0);

// 2.设置Mapping
try {
XContentBuilder builder = jsonBuilder().startObject().startObject("properties")
.startObject("id")
.field("type", "long").endObject()
.startObject("title").field("type", "text")
.field("analyzer", "ik_max_word").field("search_analyzer", "ik_max_word").field("boost", 2).endObject()
.startObject("key_word").field("type", "text").field("analyzer", "ik_max_word").field("search_analyzer", "ik_max_word").endObject()
.startObject("content").field("type", "text").field("analyzer", "ik_max_word").field("search_analyzer", "ik_max_word").endObject()
.startObject("url").field("type", "keyword").endObject().startObject("reply").field("type", "long").endObject()
.startObject("source").field("type", "keyword").endObject()
.startObject("postdate").field("type", "date").field("format", "yyyy-MM-dd HH:mm:ss").endObject().endObject().endObject();
System.out.println(builder.string());

XContentBuilder builder = jsonBuilder().startObject().startObject("properties")
#foreach($f in $list)
    #if($f.javatype=="int"||$f.javatype=="long")
        #if($f.tableFieldName=="create_time"||$f.tableFieldName=="update_time")
        .startObject("${f.tableFieldName}").field("type", "date").field("format", "yyyy-MM-dd HH:mm:ss").endObject().endObject().endObject()
        #else
        .startObject("${f.tableFieldName}").field("type","long").endObject()
        #end
    #elseif($f.javatype=="String")
        #if($f.tableFieldName=="title")
        .startObject("${f.tableFieldName}").field("type","text").field("analyzer", "ik_max_word").field("search_analyzer", "ik_max_word").endObject()
        #else
        .startObject("${f.tableFieldName}").field("type","text").field("analyzer", "ik_max_word").field("search_analyzer", "ik_max_word").field("boost", 2).endObject()
        #end
    #end
#end
.endObject().endObject();

${tableWrapper.beanname}ElasticService.setMapping(Config.INDEX_NAME, tablename, builder.string());
} catch (IOException e) {
e.printStackTrace();
}

// 3. 读取MySQL
${tableWrapper.beanname}ElasticDao dao = new ${tableWrapper.beanname}ElasticDao();
dao.getConnection();
dao.mysqlTopicToEs(tablename);

}



public static void main(String[] args) {
String tablename="ejf_topic";

// 1.创建索引

EsUtils.createIndex("spnews", 1, 0);

// 2.设置Mapping
try {
XContentBuilder builder = jsonBuilder().startObject().startObject("properties")
.startObject("id")
.field("type", "long").endObject()
.startObject("title").field("type", "text")
.field("analyzer", "ik_max_word").field("search_analyzer", "ik_max_word").field("boost", 2).endObject()
.startObject("key_word").field("type", "text").field("analyzer", "ik_max_word").field("search_analyzer", "ik_max_word").endObject()
.startObject("content").field("type", "text").field("analyzer", "ik_max_word").field("search_analyzer", "ik_max_word").endObject()
.startObject("url").field("type", "keyword").endObject().startObject("reply").field("type", "long").endObject()
.startObject("source").field("type", "keyword").endObject()
.startObject("postdate").field("type", "date").field("format", "yyyy-MM-dd HH:mm:ss").endObject().endObject().endObject();
System.out.println(builder.string());

XContentBuilder builder = jsonBuilder().startObject().startObject("properties")
#foreach($f in $list)
    #if($f.javatype=="int"||$f.javatype=="long")
        #if($f.tableFieldName=="create_time"||$f.tableFieldName=="update_time")
        .startObject("${f.tableFieldName}").field("type", "date").field("format", "yyyy-MM-dd HH:mm:ss").endObject().endObject().endObject()
        #else
        .startObject("${f.tableFieldName}").field("type","long").endObject()
        #end
    #elseif($f.javatype=="String")
        #if($f.tableFieldName=="title")
        .startObject("${f.tableFieldName}").field("type","text").field("analyzer", "ik_max_word").field("search_analyzer", "ik_max_word").endObject()
        #else
        .startObject("${f.tableFieldName}").field("type","text").field("analyzer", "ik_max_word").field("search_analyzer", "ik_max_word").field("boost", 2).endObject()
        #end
    #end
#end
.endObject().endObject();

${tableWrapper.beanname}ElasticService.setMapping(Config.INDEX_NAME, tablename, builder.string());
} catch (IOException e) {
e.printStackTrace();
}

// 3. 读取MySQL

${tableWrapper.beanname}ElasticDao dao = new ${tableWrapper.beanname}ElasticDao();
dao.getConnection();
dao.mysqlTopicToEs(tablename);

}
}
